# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/dataloading.ipynb.

# %% auto 0
__all__ = ['path', 'fnames', 'fnames_train', 'fnames_val', 'fnames_test', 'labels', 'labels_train', 'labels_test', 'label_func',
           'get_bt_train_dls']

# %% ../nbs/dataloading.ipynb 3
import torch
from fastai.vision.all import *
# from self_supervised.augmentations import *
# from self_supervised.layers import *
from .helper import *

# %% ../nbs/dataloading.ipynb 6
#data: dls, dls_val, dls_test
#get the data: Need dls, dls_val, dls_test
path = untar_data(URLs.CIFAR)
fnames = get_image_files(path / "train")
fnames.sort()
#shuffle data (in reproducible way)
seed_everything(seed=seed)
fnames = fnames.shuffle()

#fnames for train, eval and test
fnames_train = fnames#[0:ts]
fnames_val = fnames[0:ts_val]

fnames_test = get_image_files(path / "test")
#fnames_test = fnames[ts+ts_val:ts+ts_val+ts_test]

def label_func(fname):
    return fname.name.split('_')[1].strip('png').strip('.')

#labels for train,eval and test
labels = [label_func(fname) for fname in fnames]
labels_train = labels#[0:ts]
#labels_val = labels[0:ts_val]
labels_test = [label_func(fname) for fname in fnames_test]

#Used for training encoder i.e. BT

def get_bt_train_dls(bs, size, device, seed, path, fnames_train, labels_train):
  
    return ImageDataLoaders.from_lists(path, fnames_train, labels_train,bs=bs, item_tfms=[Resize(size=size)], #batch_tfms=[ToTensor(), IntToFloatTensor()],
                                  valid_pct=0.0,num_workers=12,device=device,seed=seed
                                                     )
