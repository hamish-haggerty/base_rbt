# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/cifar10_dataloading.ipynb.

# %% auto 0
__all__ = ['seed', 'size', 'cifar_path', 'get_bt_cifar10_train_dls', 'get_supervised_cifar10_train_dls',
           'get_supervised_cifar10_test_dls', 'load_cifar10_train_data', 'load_cifar10_test_data', 'label_func']

# %% ../nbs/cifar10_dataloading.ipynb 3
import torch
from fastai.vision.all import *
# from self_supervised.augmentations import *
# from self_supervised.layers import *
from .utils import *

# %% ../nbs/cifar10_dataloading.ipynb 5
def get_bt_cifar10_train_dls(bs, size, device, pct_dataset=1.0, num_workers=12):
    fnames_train, labels_train = load_cifar10_train_data(pct_dataset)
    test_eq(len(labels_train), len(fnames_train))
    n = len(fnames_train) - 1
    dls = ImageDataLoaders.from_lists(path, fnames_train[0:n], labels_train[0:n], bs=bs, item_tfms=[Resize(size=size)],
                                      valid_pct=0.0, num_workers=num_workers, device=device, seed=seed)
    if pct_dataset == 1.0:
        test_eq(len(dls.train), 50000)
    return dls

def get_supervised_cifar10_train_dls(bs, size, device, pct_dataset=1.0, num_workers=12):
    fnames_train, labels_train = load_cifar10_train_data(pct_dataset)
    test_eq(len(labels_train), len(fnames_train))
    dls = ImageDataLoaders.from_lists(path, fnames_train, labels_train, bs=bs, item_tfms=[Resize(size=size)],
                                      valid_pct=0.0, num_workers=num_workers, device=device, seed=seed)
    if pct_dataset == 1.0:
        test_eq(len(dls.train), 50000)
    return dls

def get_supervised_cifar10_test_dls(bs, size, device, pct_dataset=1.0, num_workers=12):
    fnames_test, labels_test = load_cifar10_test_data(pct_dataset)
    test_eq(len(labels_test), len(fnames_test))
    dls = ImageDataLoaders.from_lists(path, fnames_test, labels_test, bs=bs, item_tfms=[Resize(size=size)],
                                      valid_pct=0.0, num_workers=num_workers, device=device, seed=seed)
    if pct_dataset == 1.0:
        test_eq(len(dls.train), 10000)
    return dls

def load_cifar10_train_data(pct_dataset=1.0):
    fnames_train = get_image_files(path / "train")
    fnames_train.sort()
    seed_everything(seed=seed)
    fnames_train = fnames_train.shuffle()
    labels_train = [label_func(fname) for fname in fnames_train]
    n = int(len(fnames_train) * pct_dataset)
    test_eq(len(set(labels_train[:n])), 10)
    test_eq(len(fnames_train), 50000)
    return fnames_train[:n], labels_train[:n]

def load_cifar10_test_data(pct_dataset=1.0):
    fnames_test = get_image_files(path / "test")
    labels_test = [label_func(fname) for fname in fnames_test]
    n = int(len(fnames_test) * pct_dataset)
    test_eq(len(fnames_test), 10000)
    return fnames_test[:n], labels_test[:n]

seed = 42
size = 32

cifar_path = '/home/runner/.fastai/data/cifar10/cifar10'
if not os.path.exists(cifar_path):
    path = untar_data(URLs.CIFAR)
else:
    path = cifar_path

def label_func(fname):
    return fname.name.split('_')[1].strip('png').strip('.')
