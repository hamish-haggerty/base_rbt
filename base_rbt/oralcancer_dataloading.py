# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/oralcancer_dataloading.ipynb.

# %% auto 0
__all__ = ['label_func', 'get_supervised_oralcancer_train_dls', 'get_supervised_oralcancer_test_dls',
           'get_bt_oralcancer_train_dls']

# %% ../nbs/oralcancer_dataloading.ipynb 3
import torch
from fastai.vision.all import *
# from self_supervised.augmentations import *
# from self_supervised.layers import *
from .utils import *
import re
import os


# %% ../nbs/oralcancer_dataloading.ipynb 7
def label_func(x):
    # Function to extract the label from the parent directory name
    return x.parent.name

def get_supervised_oralcancer_train_dls(bs, 
                                        dataset_dir, 
                                        size=256, 
                                        device='cpu', 
                                        pct_dataset=1.0, 
                                        num_workers=12):
    train_dir = os.path.join(dataset_dir, "train", "train")  # Adjust for the additional directory layer
    
    # Get image files from the training directory
    fnames = get_image_files(train_dir)

    # Apply subset size
    n = int(len(fnames) * pct_dataset)
    fnames = fnames[:n]

    # Data transformations
    item_tfms = [Resize(size)]

    # Create the DataLoader
    dls = ImageDataLoaders.from_path_func(
        path=train_dir,
        fnames=fnames,
        label_func=label_func,
        bs=bs,
        item_tfms=item_tfms,
        valid_pct=0.0,  # No validation split, using all for training
        device=device,
        num_workers=num_workers * (device == 'cuda')
    )

    return dls

def get_supervised_oralcancer_test_dls(bs, 
                                       dataset_dir, 
                                       size=256, 
                                       device='cpu', 
                                       pct_dataset=1.0, 
                                       num_workers=12):
    test_dir = os.path.join(dataset_dir, "test", "test")  # Adjust for the additional directory layer
    
    # Get image files from the testing directory
    fnames = get_image_files(test_dir)

    # Apply subset size
    n = int(len(fnames) * pct_dataset)
    fnames = fnames[:n]

    # Data transformations
    item_tfms = [Resize(size)]

    # Create the DataLoader
    dls = ImageDataLoaders.from_path_func(
        path=test_dir,
        fnames=fnames,
        label_func=label_func,
        bs=bs,
        item_tfms=item_tfms,
        valid_pct=0,  # No validation split for the test set
        device=device,
        num_workers=num_workers * (device == 'cuda')
    )

    return dls


def get_bt_oralcancer_train_dls(bs,size,device,pct_dataset=1.0,num_workers=12):
    #NOTE: assume unzip like: !unzip -q -o "/content/drive/My Drive/dermnet.zip" -d "/content/drive/My Drive/DermNetDataset"

    dataset_dir = "/content/Oral_Cancer_Data"  #hardcode for SSL.

    return get_supervised_oralcancer_train_dls(bs, 
                                        dataset_dir, 
                                        size=size, 
                                        device=device, 
                                        pct_dataset=pct_dataset, 
                                        num_workers=num_workers)

    

    return dls
